package de.hsrm.cs.emu.interton;

import de.hsrm.cs.emu.interton.exception.RomAddrNotValidException;
import de.hsrm.cs.emu.interton.exception.RomNotInitializedException;

// encapsulates the rom content for us
public class ROM {
	
	// the actual content of the ROM
	// note: we always use short to prevent problems with the signed type byte
	private static short[] rom_content = null;
	
	// static constructor will be called when the class is first used/needed
	static {
		// hex representation of the ROM content (pong game)
		String rom_hex_string
		
		// convert hex to short array
		
		// get some space in array
		ROM.rom_content = new short[rom_hex_string.length()/2];
		
		// convert two characters to array element
		for(int i=0; i<rom_hex_string.length(); i=i+2) {
			ROM.rom_content[i/2] = Short.parseShort(rom_hex_string.substring(i, i+2), 16);
		}
	}
	
	// hide constructor to outside world
	private ROM() {
		
	}
	
	// return the byte of the ROM at the given addr
	public static short getByte(int addr) throws RomNotInitializedException, RomAddrNotValidException {
		// is rom content initialized?
		if(null != ROM.rom_content) {
			// is addr valid?
			if(0 <= addr && addr < (ROM.rom_content.length-1)) {
				return ROM.rom_content[addr];
			}
			else {
				// addr not valid
				throw new RomAddrNotValidException();
			}
		}
		else {
			// rom content not initialized
			throw new RomNotInitializedException();
		}
	}
	
//	// test if the encapsulation of the ROM works
//	public static void main(String[] args) {
//		for(int i=0; i<ROM.rom_content.length; i++) {
//			if(0==i%16) {
//				System.out.print("\r\n");
//				System.out.print(String.format("0x%03X ", i));
//			}
//			System.out.print(String.format("%02X ", ROM.rom_content[i]));
//		}
//	}
}
 